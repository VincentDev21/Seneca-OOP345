*****************************************************************************
                          Workshop - #5 (P2)
Full Name  : Vincent Le
Student ID#: 131117228
Email      : vle21@myseneca.ca
Section    : NCC
Date       : 06/25/2023

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
In this workshop, I learned insight into functions, error handling, and the use of class templates in this training. 
I had the opportunity to practise creating and coding a templated class that controls a set of T-objects.
To address particular jobs, I also built a function object (functor) and a lambda expression.

The distinction between a functor and a lambda expression was one of the important ideas I looked at. 
A functor is a type of function object with an overloaded operator() that can be called like a regular function. 
An anonymous function that can be defined inline is a lambda expression, on the other hand. 
Both can be utilised to accomplish the same job, but which one is best will depend on the particular 
demands of the task at hand. While lambdas are shorter and better suitable for simple, short-lived functions, 
functors are more flexible and can contain state.

I encountered a situation where the constructor of the SpellChecker class generates an exception when 
the specified file is missing. To achieve the same result without exceptions, we could modify the constructor 
to return a boolean indicating whether the file was loaded successfully. Additionally, the client code would 
need to check the return value and handle the case where the file loading fails. This approach provides a more 
explicit and predictable flow of execution and allows the client to handle the error appropriately.

I noticed that the Movie and Book classes share similar logic for loading data from files. To avoid duplication, 
we could create a separate class or function that handles the file parsing and token extraction. Both Movie and Book 
classes can then utilize this common logic by calling the shared function or utilizing the shared class. This way, 
we can achieve code reuse and make the implementation more modular and maintainable.

Overall, this workshop helped me gain a better understanding of functions, error handling, and class templates. 
I learned the distinctions between functors and lambda expressions and when to use each. I also explored alternative 
approaches to exception handling and code reuse. These concepts will undoubtedly be valuable in future programming tasks.