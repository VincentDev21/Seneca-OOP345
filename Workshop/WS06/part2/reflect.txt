*****************************************************************************
                          Workshop - #6 (P1)
Full Name  : Vincent Le
Student ID#: 131117228
Email      : vle21@myseneca.ca
Section    : NCC
Date       : 07/06/2023

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

In completing this workshop, I gained a solid understanding of managing polymorphic objects using the vector container of the STL. 
I learned the importance of deallocating dynamically allocated memory in the vector to prevent memory leaks. Since the vector stores 
pointers to objects, it does not automatically handle memory deallocation. It is our responsibility to iterate through the vector and delete 
each dynamically allocated object explicitly in the Autoshop's destructor.

When building objects from the input file, various issues can occur, such as encountering an unknown type of vehicle or invalid data in a record. 
I implemented error handling in the createInstance function to detect these situations. By checking the first non-blank character extracted from the stream, 
I determined the type of vehicle. If it was an unknown type, I threw an exception to inform the client. For invalid data, I checked the validity of each field 
and threw an exception if any data was incorrect. An alternative solution could involve using an input validation mechanism that checks the validity of each 
field separately, providing more detailed error messages.

In this workshop, I utilized std::listsdds::Vehicle* and std::vectorsdds::Vehicle* to store collections of vehicles as pointers. Using pointers allows 
polymorphic behavior, where the vector or list can hold objects of different derived types. If we had used std::listsdds::Vehicle and std::vectorsdds::Vehicle 
instead, it would only store objects of the base class type. This would result in object slicing, where the derived class-specific data and behavior would be lost. 
Therefore, using pointers was necessary to maintain the polymorphic nature of the objects and access the derived class-specific functionality.

Overall, this workshop provided valuable hands-on experience with STL containers, polymorphism, memory management, and error handling. 
It reinforced the importance of proper memory deallocation and the flexibility offered by storing pointers to objects in containers.