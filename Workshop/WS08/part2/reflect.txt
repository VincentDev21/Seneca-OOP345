*****************************************************************************
                          Workshop - #8 (P2)
Full Name  : Vincent Le
Student ID#: 131117228
Email      : vle21@myseneca.ca
Section    : NCC
Date       : 07/23/2023

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

During this workshop, I have gained a comprehensive understanding of smart pointers and their advantages over raw pointers. 
Smart pointers are a powerful concept in C++ that manage memory automatically, preventing many memory-related issues such as 
memory leaks and dangling pointers. I achieved this by encapsulating a raw pointer within an object that takes care of its memory management. 
One significant advantage of using smart pointer syntax is that it automatically handles the memory deallocation when the object is no longer needed, 
preventing memory leaks. This is achieved through mechanisms like reference counting or unique ownership.


In my solution, I used a std::unique_ptr to manage the memory of a dynamically allocated object in the writeSmart function. I use smart pointers to 
allocated memory by using this statement 
std::unique_ptr<EmployeeWage>employees(new EmployeeWage(emp[i].name, sal[j].salary)) 
instead of this statement.
EmployeeWage *employees = nullptr;
employees = new EmployeeWage(emp[i].name, sal[j].salary);.


The difference between raw pointer syntax and smart pointer syntax in my solution was evident in the memory management. 
With raw pointers, I had to manually allocate memory using new and remember to deallocate it using delete. 
Failure to deallocate could lead to memory leaks. However, using smart pointers, I didn't have to worry about explicit memory deallocation. 
The smart pointer took care of it automatically when it went out of scope or was no longer needed. This made the code cleaner, safer, and less 
prone to memory-related errors.

In conclusion, smart pointer syntax in C++ is a valuable tool for managing memory efficiently and securely. By using smart pointers, 
developers can avoid common memory-related pitfalls, leading to more robust and reliable code. During this workshop, I not only grasped 
the advantages of smart pointers but also applied them effectively in my solution, enhancing my understanding of memory management in C++.
